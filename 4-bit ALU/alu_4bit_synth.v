/* Generated by Yosys 0.53+3 (git sha1 6378ba10e, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* top =  1  *)
(* src = "alu_4bit.v:1.1-22.10" *)
module alu_4bit(a, b, sel, result);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  (* src = "alu_4bit.v:3.13-3.14" *)
  input [3:0] a;
  wire [3:0] a;
  (* src = "alu_4bit.v:4.13-4.14" *)
  input [3:0] b;
  wire [3:0] b;
  (* src = "alu_4bit.v:6.18-6.24" *)
  output [4:0] result;
  wire [4:0] result;
  (* src = "alu_4bit.v:5.13-5.16" *)
  input [1:0] sel;
  wire [1:0] sel;
  assign _000_ = a[0] & b[0];
  assign _001_ = ~(sel[0] | sel[1]);
  assign _002_ = sel[0] & sel[1];
  assign _003_ = sel[1] & ~(sel[0]);
  assign _004_ = _003_ | _002_;
  assign _005_ = ~(a[0] | b[0]);
  assign _006_ = _005_ | _000_;
  assign _007_ = _004_ & ~(_006_);
  assign _008_ = sel[0] & ~(sel[1]);
  assign _009_ = _008_ & ~(_005_);
  assign _010_ = _009_ | _007_;
  assign result[0] = _001_ ? _000_ : _010_;
  assign _011_ = a[1] & b[1];
  assign _012_ = ~a[1];
  assign _013_ = b[0] ^ b[1];
  assign _014_ = _002_ ? b[1] : _013_;
  assign _015_ = _014_ ^ _012_;
  assign _016_ = b[0] & ~(a[0]);
  assign _017_ = _016_ ^ _015_;
  assign _018_ = _004_ & ~(_017_);
  assign _019_ = ~(a[1] | b[1]);
  assign _020_ = _008_ & ~(_019_);
  assign _021_ = _020_ | _018_;
  assign result[1] = _001_ ? _011_ : _021_;
  assign _022_ = a[2] & b[2];
  assign _023_ = ~b[2];
  assign _024_ = ~(b[0] | b[1]);
  assign _025_ = _024_ ^ b[2];
  assign _026_ = _002_ ? _023_ : _025_;
  assign _027_ = _026_ ^ a[2];
  assign _028_ = _014_ | _012_;
  assign _029_ = _015_ & ~(_016_);
  assign _030_ = _028_ & ~(_029_);
  assign _031_ = _030_ ^ _027_;
  assign _032_ = _004_ & ~(_031_);
  assign _033_ = ~(a[2] | b[2]);
  assign _034_ = _008_ & ~(_033_);
  assign _035_ = _034_ | _032_;
  assign result[2] = _001_ ? _022_ : _035_;
  assign _036_ = a[3] & b[3];
  assign _037_ = ~b[3];
  assign _038_ = _024_ & ~(b[2]);
  assign _039_ = _038_ ^ b[3];
  assign _040_ = _002_ ? _037_ : _039_;
  assign _041_ = _040_ ^ a[3];
  assign _042_ = ~(_026_ & a[2]);
  assign _043_ = _027_ & ~(_030_);
  assign _044_ = _042_ & ~(_043_);
  assign _045_ = _044_ ^ _041_;
  assign _046_ = _004_ & ~(_045_);
  assign _047_ = ~(a[3] | b[3]);
  assign _048_ = _008_ & ~(_047_);
  assign _049_ = _048_ | _046_;
  assign result[3] = _001_ ? _036_ : _049_;
  assign _050_ = b[3] | b[2];
  assign _051_ = _024_ & ~(_050_);
  assign _052_ = _051_ | _002_;
  assign _053_ = ~(_040_ & a[3]);
  assign _054_ = _041_ & ~(_042_);
  assign _055_ = _053_ & ~(_054_);
  assign _056_ = _041_ & _027_;
  assign _057_ = _056_ & ~(_030_);
  assign _058_ = _055_ & ~(_057_);
  assign _059_ = _058_ ^ _052_;
  assign _060_ = _004_ & ~(_059_);
  assign result[4] = _060_ & ~(_001_);
endmodule
